#!/bin/sh

set -e

# 
# DEFAULTS
#


OWN_SUFFIX=".tpl.sh"

# 
# BASIC VARIABLES
#

OWN_DIR="$( realpath -s "$(dirname "${0}")" )"
TARGET_FILE="${OWN_DIR}/$(basename "${0}" "${OWN_SUFFIX}")"
WORKSPACE_ROOT="${WORKSPACE_ROOT:-"$( realpath -s "${OWN_DIR}/" )"}"
WORKSPACE_NAME="${WORKSPACE_NAME:-"$(basename "${WORKSPACE_ROOT}")"}"

if [ -e "${TARGET_FILE}.defaults" ]; then
    . "${TARGET_FILE}.defaults"
fi

# 
# OTHER VARIABLES
#

# ...

# 
# CLI PARSING
#

PRISTINE="${PRISTINE:-"0"}"

while [ "$#" -gt 0 ]; do
    case "$1" in
    --pristine) shift; PRISTINE="1" ;;
    -p) shift; PRISTINE="1" ;;
    -h) printf 'Usage: %s [OPTIONS]\n' >&2; exit 0 ;;
    --) shift; break ;;
    -*) printf 'FATAL: Unknown option/flag: %s\n'  "$1" >&2; exit 1 ;;
    *) break ;;
    esac
done

if [ "$#" -gt 0 ]; then
    printf 'FATAL: This script does not receive positional parameters.\n' >&2
    exit 1
fi

#
# DEPENDENT ENV FILES
#

export PRISTINE

"${WORKSPACE_ROOT}/host.env${OWN_SUFFIX}"
. "${WORKSPACE_ROOT}/host.env"

# 
# TARGET FILE GENERATION
#

if [ -e "${TARGET_FILE}" ]; then
    if [ "${PRISTINE}" -eq 1 ]; then
        printf 'INFO: Template file "%s": Target file "%s" already exists, but will be recreated.\n' "${0}" "${TARGET_FILE}" >&2
    elif [ "${0}" -nt "${TARGET_FILE}" ]; then
        printf 'WARN: Template file "%s": Target file "%s" already exists, but the template is newer. Consider activating pristine mode, or reviewing its contents.\n'  "${0}" "${TARGET_FILE}" >&2
        exit 0
    else
        printf 'INFO: Template file "%s": Target file "%s" already exists.\n' "${0}" "${TARGET_FILE}" >&2
        exit 0
    fi
else
    printf 'INFO: Template file "%s": Creating target file "%s"...\n' "${0}" "${TARGET_FILE}" >&2
fi

cat >"${TARGET_FILE}" <<EOF
# AUTOGENERATED AT $(date -Ins -u)

WORKSPACE_ROOT="/workspace"
WEST_WORKSPACE_DIRNAME="${WEST_WORKSPACE_DIRNAME}"
ZEPHYR_BASE="${GUEST_ZEPHYR_BASE:-"/workspace/${WEST_WORKSPACE_DIRNAME}/${ZEPHYR_DIRNAME}"}"

WORKSPACE_NAME="${WORKSPACE_NAME}"
ZEPHYR_DIRNAME="${ZEPHYR_DIRNAME}"

TZ="${TZ}"
LANG="${LANG}"
LC_CTYPE="${LC_CTYPE}"
LC_TIME="${LC_TIME}"

DOCKER_HOST_IP="${DOCKER_HOST_IP}"

HOST_PROXY_HOST="${HOST_PROXY_HOST}"
HOST_PROXY_PORT="${HOST_PROXY_PORT}"

HOST_GDB_HOST="${HOST_GDB_HOST}"
HOST_GDB_PORT="${HOST_GDB_PORT}"
EOF
