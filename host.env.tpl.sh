#!/bin/sh

set -e

# 
# DEFAULTS
#


DEFAULT_HOST_GDB_PORT="3333"
DEFAULT_WEST_WORKSPACE_DIRNAME="projects"
DEFAULT_DEVCONTAINER_COMPOSE_FILE_NAME="passthrough.docker-compose.yml"
DEFAULT_DEVCONTAINER_DOCKER_FILE_NAME="docker-simple.Dockerfile"
DEFAULT_DEVCONTAINER_HOST_HOSTNAME="host.containers.internal"
DEFAULT_ZEPHYR_DIRNAME="zephyr"

OWN_SUFFIX=".tpl.sh"

# 
# BASIC VARIABLES
#

OWN_DIR="$( realpath -s "$(dirname "${0}")" )"
TARGET_FILE="${OWN_DIR}/$(basename "${0}" "${OWN_SUFFIX}")"
WORKSPACE_ROOT="${WORKSPACE_ROOT:-"$( realpath -s "${OWN_DIR}/" )"}"
WORKSPACE_NAME="${WORKSPACE_NAME:-"$(basename "${WORKSPACE_ROOT}")"}"

if [ -e "${TARGET_FILE}.defaults" ]; then
    . "${TARGET_FILE}.defaults"
fi

# 
# OTHER VARIABLES
#

if [ ! -z "${WEST_WORKSPACE_DIR}" ]; then
    WEST_WORKSPACE_DIR="$(realpath -s "${WEST_WORKSPACE_DIR}")"
    WEST_WORKSPACE_DIRNAME="$(basename "${WEST_WORKSPACE_DIR}")"
else
    WEST_WORKSPACE_DIRNAME="${WEST_WORKSPACE_DIRNAME:-"${DEFAULT_WEST_WORKSPACE_DIRNAME}"}"
    WEST_WORKSPACE_DIR="$(realpath -s "${WEST_WORKSPACE_DIR:-"${WORKSPACE_ROOT}/${WEST_WORKSPACE_DIRNAME}"}")"
fi

DEVCONTAINER_COMPOSE_FILE_NAME="${DEVCONTAINER_COMPOSE_FILE_NAME:-"${DEFAULT_DEVCONTAINER_COMPOSE_FILE_NAME}"}"
DEVCONTAINER_DOCKER_FILE_NAME="${DEVCONTAINER_DOCKER_FILE_NAME:-"${DEFAULT_DEVCONTAINER_DOCKER_FILE_NAME}"}"
ZEPHYR_DIRNAME="${ZEPHYR_DIRNAME:-"${DEFAULT_ZEPHYR_DIRNAME}"}"

DOCKER="${DOCKER:-"$(command -v docker)"}" || true
DOCKER="${DOCKER:-"docker"}"
DOCKER_HOST_IP="${HOST_IP:-"$("${DOCKER}" network inspect bridge -f '{{range .IPAM.Config}}{{.Gateway}}{{end}}')"}" || true
DOCKER_HOST_IP="${DOCKER_HOST_IP:-""}"
HOST_PROXY_HOST="${HOST_PROXY_HOST:-"${DOCKER_HOST_IP:-"${DEFAULT_DEVCONTAINER_HOST_HOSTNAME}"}"}"
HOST_PROXY_PORT="${HOST_PROXY_PORT:-"${PROXY_PORT:-"3128"}"}"

HOST_GDB_HOST="${HOST_GDB_HOST:-"${DOCKER_HOST_IP}"}"
HOST_GDB_PORT="${HOST_GDB_PORT:-"${DEFAULT_HOST_GDB_PORT}"}"

USER="${USER:-"$(id -un)"}"
USER_UID="${USER_UID:-"$(id -u)"}"
USER_GID="${USER_GID:-"$(id -g)"}"

JLINK_GNAME="${JLINK_GNAME:-"jlink"}"
JLINK_GID="${JLINK_GID:-"$(getent group "${JLINK_GNAME}" | cut -d: -f3)"}" || true

PLUGDEV_GNAME="${PLUGDEV_GNAME:-"plugdev"}"
PLUGDEV_GID="${PLUGDEV_GID:-"$(getent group "${PLUGDEV_GNAME}" | cut -d: -f3)"}" || true

TTY_GNAME="${TTY_GNAME:-"tty"}"
TTY_GID="$(getent group "${TTY_GNAME}" | cut -d: -f3)" || true

DIALOUT_GNAME="${DIALOUT_GNAME:-"dialout"}"
DIALOUT_GID="$(getent group "${DIALOUT_GNAME}" | cut -d: -f3)" || true

INPUT_GNAME="${INPUT_GNAME:-"input"}"
INPUT_GID="$(getent group "${INPUT_GNAME}" | cut -d: -f3)" || true

USERS_GNAME="${USERS_GNAME:-"users"}"
USERS_GID="$(getent group "${USERS_GNAME}" | cut -d: -f3)"

ZEPHYR_BASE="${ZEPHYR_BASE:-"${WEST_WORKSPACE_DIR}/zephyr"}"
TZ="${TZ:-"$( ([ -e "/etc/timezone" ] && cat /etc/timezone ) || ([ -L "/etc/localtime" ] && { l="$(realpath -L /etc/localtime)"; printf '%s\n' "$(basename "$(dirname "${l}")")/$(basename "${l}")"; } || printf 'UTC\n') )"}"
LANG="${LANG:-"en_US.UTF-8"}"
LC_CTYPE="${LC_CTYPE:-"en_US.UTF-8"}"
LC_TIME="${LC_TIME:-"en_US.UTF-8"}"

SVD_DATA_DIR="${SVD_DATA_DIR:-"data/STMicro \
    data/Espressif \
    data/Nordic \
    data/RaspberryPi"}"

ZEPHYR_SDK_TOOLCHAIN="${ZEPHYR_SDK_TOOLCHAIN:-"arm-zephyr-eabi \
    aarch64-zephyr-elf \
    riscv64-zephyr-elf \
    x86_64-zephyr-elf \
    xtensa-espressif_esp32s3_zephyr-elf \
    xtensa-espressif_esp32_zephyr-elf"}"
# 
# CLI PARSING
#

PRISTINE="${PRISTINE:-"0"}"

while [ "$#" -gt 0 ]; do
    case "$1" in
    --pristine) shift; PRISTINE="1" ;;
    -p) shift; PRISTINE="1" ;;
    -h) printf 'Usage: %s [OPTIONS]\n' >&2; exit 0 ;;
    --) shift; break ;;
    -*) printf 'FATAL: Unknown option/flag: %s\n'  "$1" >&2; exit 1 ;;
    *) break ;;
    esac
done

if [ "$#" -gt 0 ]; then
    printf 'FATAL: This script does not receive positional parameters.\n' >&2
    exit 1
fi

# 
# TARGET FILE GENERATION
#

if [ -e "${TARGET_FILE}" ]; then
    if [ "${PRISTINE}" -eq 1 ]; then
        printf 'INFO: Template file "%s": Target file "%s" already exists, but will be recreated.\n' "${0}" "${TARGET_FILE}" >&2
    elif [ "${0}" -nt "${TARGET_FILE}" ]; then
        printf 'WARN: Template file "%s": Target file "%s" already exists, but the template is newer. Consider activating pristine mode, or reviewing its contents.\n'  "${0}" "${TARGET_FILE}" >&2
        exit 0
    else
        printf 'INFO: Template file "%s": Target file "%s" already exists.\n' "${0}" "${TARGET_FILE}" >&2
        exit 0
    fi
else
    printf 'INFO: Template file "%s": Creating target file "%s"...\n' "${0}" "${TARGET_FILE}" >&2
fi

cat >"${TARGET_FILE}" <<EOF
# AUTOGENERATED AT $(date -Ins -u)

WORKSPACE_NAME="${WORKSPACE_NAME}"
DEVCONTAINER_COMPOSE_FILE_NAME="${DEVCONTAINER_COMPOSE_FILE_NAME}"
DEVCONTAINER_DOCKER_FILE_NAME="${DEVCONTAINER_DOCKER_FILE_NAME}"

ZEPHYR_DIRNAME="${ZEPHYR_DIRNAME}"
HOST_ZEPHYR_BASE="${ZEPHYR_BASE}"
WEST_WORKSPACE_DIRNAME="${WEST_WORKSPACE_DIRNAME}"
HOST_WEST_WORKSPACE_DIR="${WEST_WORKSPACE_DIR}"

TZ="${TZ}"
LANG="${LANG}"
LC_CTYPE="${LC_CTYPE}"
LC_TIME="${LC_TIME}"

HOST_WORKSPACE_ROOT="${WORKSPACE_ROOT}"
DOCKER_HOST_IP="${DOCKER_HOST_IP}"
HOST_PROXY_HOST="${HOST_PROXY_HOST}"
HOST_PROXY_PORT="${HOST_PROXY_PORT}"

HOST_GDB_HOST="${HOST_GDB_HOST}"
HOST_GDB_PORT="${HOST_GDB_PORT}"

USER="${USER}"
USERNAME="${USER}"
USER_UID="${USER_UID}"
USER_GID="${USER_GID}"

TTY_GNAME="${TTY_GNAME}"
TTY_GID="${TTY_GID}"

DIALOUT_GNAME="${DIALOUT_GNAME}"
DIALOUT_GID="${DIALOUT_GID}"

INPUT_GNAME="${INPUT_GNAME}"
INPUT_GID="${INPUT_GID}"

USERS_GNAME="${USERS_GNAME}"
USERS_GID="${USERS_GID}"

JLINK_GNAME="${JLINK_GNAME}"
JLINK_GID="${JLINK_GID}"

PLUGDEV_GNAME="${PLUGDEV_GNAME}"
PLUGDEV_GID="${PLUGDEV_GID}"

SVD_DATA_DIR="${SVD_DATA_DIR}"
ZEPHYR_SDK_TOOLCHAIN="${ZEPHYR_SDK_TOOLCHAIN}"
EOF
