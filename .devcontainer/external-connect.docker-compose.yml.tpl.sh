#!/bin/sh

set -e

#
# BASIC SCRIPT VARIABLES
#

OWN_DIR="$( realpath -s "$(dirname "${0}")" )"
WORKSPACE_ROOT="${WORKSPACE_ROOT:-"$( realpath -s "${OWN_DIR}/.." )"}"
WORKSPACE_SCRIPTS_DIR="${WORKSPACE_SCRIPTS_DIR:-"${WORKSPACE_ROOT}/scripts"}"
WORKSPACE_SCRIPTS_INCLUDE_DIR="${WORKSPACE_SCRIPTS_INCLUDE_DIR:-"${WORKSPACE_SCRIPTS_DIR}/include"}"

. "${WORKSPACE_SCRIPTS_INCLUDE_DIR}/template.inc.sh"

#
# BASIC TEMPLATE VARIABLES
#

HOST_HOME_MAPPED_PATHS="${HOST_HOME_MAPPED_PATHS:-".gnupg .gitconfig .ssh .aws .azure .saml2aws"}"

#
# DEPENDENT FILES
#

_source_tpl_env_file host.env
_ensure_tpl_file .env

#
# TARGET FILE GENERATION
#

_do_generate_file() {
    local _target_file
    _target_file="${1}"; shift
cat >"${_target_file}" <<-EOF
# AUTOGENERATED AT $(date -Ins -u)

# Prepares a dev environment where OpenOCD is executed on the host,
# and the developer connects to it from the guest (devcontainer).
#
# This devcontainer can be executed in rootless mode, or even with
# Podman, etc. (as long as \`docker\` and \`docker-compose\` are
# available). It requires the least amount of permissions.
#
# However, it won't be possible to connect to devices in any way,
# e.g. for logging via USB, for debugging, etc. Instead, the user
# will have to connect to some sort of service being run in the host,
# in order to externally control or connect to the device (e.g.
# OpenOCD/GDB Server, etc.)
#

services:
  devcontainer:
    build:
      context: .
      dockerfile: ${DEVCONTAINER_DOCKER_FILE_NAME}
      args:
$(cat "${WORKSPACE_ROOT}/host.env" | sed -E -e 's/^([^=]+)=/\1: /g' -e 's/^\s*#.*$//g' -e 's/^/        /g' | grep -vE '^\s*$')
    volumes:
      - source: ..
        target: /workspace
        type: bind
        consistency: consistent
      - source: /tmp/.X11-unix
        target: /tmp/.X11-unix
        type: bind
        consistency: consistent
$(
for home_file in ${HOST_HOME_MAPPED_PATHS}; do
    if [ -e "/home/${USER}/${home_file}" ]; then
    cat <<-HOMEFILE_EOF
      - source: ~/${home_file}
        target: /home/${USER}/${home_file}
        type: bind
        consistency: consistent
HOMEFILE_EOF
    fi
done
)
    env_file:
      - ../.env
    command: sleep infinity
    extra_hosts:
      $([ ! -z "${DOCKER_HOST_IP}" ] && printf -- '- "host.docker.internal:%s"' "${DOCKER_HOST_IP}" || printf "")
      $([ ! -z "${DOCKER_HOST_IP}" ] && printf -- '- "host.containers.internal:%s"' "${DOCKER_HOST_IP}" || printf "")
EOF
}

_generate_target_file

log_verbose_ok 'Done.'
