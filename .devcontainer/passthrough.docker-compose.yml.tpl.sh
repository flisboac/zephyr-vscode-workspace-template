#!/bin/sh

set -e

#
# DEFAULTS
#


OWN_SUFFIX=".tpl.sh"

#
# BASIC VARIABLES
#

OWN_DIR="$( realpath -s "$(dirname "${0}")" )"
TARGET_FILE="${OWN_DIR}/$(basename "${0}" "${OWN_SUFFIX}")"
WORKSPACE_ROOT="${WORKSPACE_ROOT:-"$( realpath -s "${OWN_DIR}/.." )"}"
WORKSPACE_NAME="${WORKSPACE_NAME:-"$(basename "${WORKSPACE_ROOT}")"}"
HOST_HOME_MAPPED_PATHS="${HOST_HOME_MAPPED_PATHS:-".gnupg .gitconfig .ssh .aws .azure .saml2aws"}"

if [ -e "${TARGET_FILE}.defaults" ]; then
    . "${TARGET_FILE}.defaults"
fi

#
# CLI PARSING
#

PRISTINE="${PRISTINE:-"0"}"

while [ "$#" -gt 0 ]; do
    case "$1" in
    --pristine) shift; PRISTINE="1" ;;
    -p) shift; PRISTINE="1" ;;
    -h) printf 'Usage: %s [OPTIONS]\n' >&2; exit 0 ;;
    --) shift; break ;;
    -*) printf 'FATAL: Unknown option/flag: %s\n'  "$1" >&2; exit 1 ;;
    *) break ;;
    esac
done

if [ "$#" -gt 0 ]; then
    printf 'FATAL: This script does not receive positional parameters.\n' >&2
    exit 1
fi

#
# DEPENDENT ENV FILES
#

export PRISTINE

"${WORKSPACE_ROOT}/host.env${OWN_SUFFIX}"
. "${WORKSPACE_ROOT}/host.env"

# "${WORKSPACE_ROOT}/.env${OWN_SUFFIX}"
# . "${WORKSPACE_ROOT}/.env"

#
# TARGET FILE GENERATION
#

if [ -e "${TARGET_FILE}" ]; then
    if [ "${PRISTINE}" -eq 1 ]; then
        printf 'INFO: Template file "%s": Target file "%s" already exists, but will be recreated.\n' "${0}" "${TARGET_FILE}" >&2
    elif [ "${0}" -nt "${TARGET_FILE}" ]; then
        printf 'WARN: Template file "%s": Target file "%s" already exists, but the template is newer. Consider activating pristine mode, or reviewing its contents.\n'  "${0}" "${TARGET_FILE}" >&2
        exit 0
    else
        printf 'INFO: Template file "%s": Target file "%s" already exists.\n' "${0}" "${TARGET_FILE}" >&2
        exit 0
    fi
else
    printf 'INFO: Template file "%s": Creating target file "%s"...\n' "${0}" "${TARGET_FILE}" >&2
fi

cat >"${TARGET_FILE}" <<EOF
# AUTOGENERATED AT $(date -Ins -u)

services:
  devcontainer:
    build:
      context: .
      dockerfile: ${DEVCONTAINER_DOCKER_FILE_NAME}
      args:
$(cat "${WORKSPACE_ROOT}/host.env" | sed -E -e 's/^([^=]+)=/\1: /g' -e 's/^\s*#.*$//g' -e 's/^/        /g' | grep -vE '^\s*$')
    volumes:
      - source: ..
        target: /workspace
        type: bind
        consistency: consistent
      - source: /dev
        target: /dev
        type: bind
        consistency: consistent
      - source: /tmp/.X11-unix
        target: /tmp/.X11-unix
        type: bind
        consistency: consistent
$(
for home_file in ${HOST_HOME_MAPPED_PATHS}; do
    if [ -e "/home/${USER}/${home_file}" ]; then
    cat <<-HOMEFILE_EOF
      - source: ~/${home_file}
        target: /home/${USER}/${home_file}
        type: bind
        consistency: consistent
HOMEFILE_EOF
    fi
done
)
    env_file:
      - ../.env
    security_opt:
      - label=disable
    privileged: true
    command: sleep infinity
    extra_hosts:
      $([ ! -z "${DOCKER_HOST_IP}" ] && printf -- '- "host.docker.internal:%s"' "${DOCKER_HOST_IP}" || printf "")
      $([ ! -z "${DOCKER_HOST_IP}" ] && printf -- '- "host.containers.internal:%s"' "${DOCKER_HOST_IP}" || printf "")
    # network_mode: service:proxy
    # depends_on:
    #   proxy:
    #     required: true
    #     condition: service_healthy
EOF
